;;; .emacs --- Personal startup file. Best viewed in -*-mode: emacs-lisp;-*-

;; Time-stamp: <dot-emacs: 23:54 2017-04-6 bengt@megadeth>

;; Copyright (C) 1997 Bengt Johannesson <johannes@df.lth.se>

;; Author: Bengt Johannesson <johannes@df.lth.se>
;; Maintainer: Bengt Johannesson <johannes@df.lth.se>
;; Version: $Revision: 1.2 $
;; Keywords: .emacs initialization

;; This file is not a part of GNU Emacs, but you can use it under the
;; same terms.

;; GNU Emacs is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version. 

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:
;;  This is my personal Emacs initialization file. Code for different
;;  modes and utilities are structured in chunks for easier "enabling" and
;;  "disabling" by commenting out the lines. 
;;
;;  Made to work on Emacs version 20.3. Some adjustments may be needed
;;  to make everything work with older versions of Emacs.
;;  
;;  I have edited and reworked this file since since 1993, my first
;;  semester at the Department of Computer Science at Lund
;;  University. There is always something new to tune up...
  
;;; Change log:
;; 
;; July 1997: Added a nice gnuish header, cleaned up the code and changed 
;;            the swedish comments into english.
;; Sept 1996: Structured the code for each mode into chunks for easier 
;;            enabling and disabling by comments.
;; Dec 1993:  Started adding and changing things to the .emacs that was 
;;            standard at the CS department in Lund.
 
;;; Code:

;;;----------------------------------------------------------------------
;;; First...
(message "*** Loading personal .emacs file...")

;;;---------------------------------------------------------------------------
;;; Definitions used in this file
(defvar my-site-lisp-dir "/usr/share/emacs/site-lisp"
  "The site-lisp directory common to all versions of emacs.")


;;;---------------------------------------------------------------------------
;;; Settings for emacs behavior.
(setq gc-cons-threshold 5000000)	; No of bytes before garbage collection. AL
(setq garbage-collection-messages t)	; Show messages when garbage collecting 

(setq message-log-max 500)		; Enable a long *Messages*-buffer.
(setq visible-bell t)			; Blink, don't beep.
(setq default-major-mode 'fundamental-mode) ; The mode to start in.

;; ;; Lower baudrate if we are not running in a windows system (dialup)
;; (if window-system
;;     (setq baud-rate 1000000)
;;   (setq baud-rate 28000))

;; ;;; Display European characters as encoded in iso8859.
;; (require 'disp-table)
;; (standard-display-european 1)

;; ;;; Load completion of words in the buffer (M-Return).
;; (load "completion")

;; ;;; Makes it possible to use wildcards with C-x C-f and others.
;; (require 'complete)


;;;---------------------------------------------------------------------------
;;; Modeline settings
(line-number-mode t)			; Display line number
(setq column-number-mode t)		; Display column number.
(setq display-time-day-and-date nil)	; Don't display date and day.
(setq display-time-24hr-format t)	; Show the time in 24 hour format.
(display-time)				; Enable the time display.


;;;---------------------------------------------------------------------------
;;; Frame settings.
;;;
(if window-system
    (progn 
      ;; Set the window title to user@systemname:buffername.
      (setq frame-title-format (list "" (getenv "USER") "@" 'system-name ": %b"))

      ;; Set frame-size.
      (setq initial-frame-alist '((width . 120) (hight . 55)))
      (setq default-frame-alist '((width . 120) (hight . 55)))))


;;;---------------------------------------------------------------------------
;;; Faces and fontlock
;;;
;; (if window-system
;;     (progn
;;     ;  (require 'font-lock)
;;       (setq font-lock-maximum-decoration t) ; Fontify as much as possible
;;       (global-font-lock-mode 1 t)	; Fontify in all modes

;;       (if (eq emacs-major-version 19)	; Define faces. Only in emacs 19.
;; 	  (progn 
;; 	    (setq font-lock-face-attributes
;; 		  (append font-lock-face-attributes
;; 			  ;; (FACE FOREGROUND BACKGROUND BOLD-P ITALIC-P UNDERLINE-P)
;; 			  '((font-lock-comment-face       "FireBrick" nil nil nil)
;; 			    (font-lock-string-face        "Tan" nil nil nil)
;; 			    (font-lock-keyword-face       "DarkOrchid" nil nil nil)
;; 			    (font-lock-function-name-face "Blue" t nil nil)
;; 			    (font-lock-variable-name-face "GoldenRod" nil nil nil)
;; 			    (font-lock-type-face          "ForestGreen" nil nil nil)
;; 			    (font-lock-reference-face     "Coral" nil nil nil))))
;; 	    (font-lock-make-faces t)))))

;; ;; (defun my-set-faces ()
;; ;;   "Set my font and my colours on faces."
;; ;;   (interactive)				; To be able to call with M-x
;; ;;   (set-default-font "8x13")		; Default font in buffer
;; ;;   (set-foreground-color "Black")	; "main" foreground.
;; ;;   (set-background-color "White")	; "main" background.
;; ;;   (set-cursor-color "Green")

;; ;;   (set-face-foreground 'modeline "Yellow")
;; ;;   (set-face-background 'modeline "DarkSlateBlue")

;; ;; ;  (set-face-foreground 'region "Black")
;; ;; ;  (set-face-foreground 'secondary-selection "Black")
;; ;; ;  (set-face-background 'highlight "DarkGreen")
;; ;; ;  (set-face-foreground 'bold "Orange")
;; ;; ;  (set-face-foreground 'bold-italic "Khaki")
;; ;; )


;;;--------------------------------------------------------------------------
;;; Enabling of font-lock and some other modes
;;;
(defun my-enable-minor-modes ()
  "Enables several minor modes."
  (interactive)
  (transient-mark-mode t)
  (if window-system
      (progn
	(font-lock-mode t)
	;;;(my-set-faces)
	)))


;;;---------------------------------------------------------------------------
;;; imenu - lets you fly around the buffer
;;;
(defun my-enable-imenu ()
  "Starts imenu and makes it available from the main menu bar and from the 
C-MB3 menu."
  (interactive)
  (if window-system
      (progn
	(setq imenu-max-items 30)

	;; Adds an `imenu' entry to the menu bar for the current buffer.
	(imenu-add-to-menubar (format "(%s %s)" "IM" mode-name))

	;; Adds an `imenu' entry to the menu C-mb3.
	(global-set-key [M-S-down-mouse-3] 
			(function imenu-choose-buffer-index)))))


;;;---------------------------------------------------------------------------
;;; Save the desktop between sessions.
;;;
;; (require 'desktop)
;; (desktop-load-default)
;; (desktop-read)



;;;---------------------------------------------------------------------------
;;; Time-stamp
;;; Stamp the file with time, date and user info if `Time-stamp: <>'
;;; exists in the first 15 rows.
(require 'time-stamp)
(setq time-stamp-line-limit 15)		; Number of lines to search for the tag.
(setq time-stamp-format "%f: %02H:%02M %:y-%02m-%:d %u@%s")
(add-hook 'write-file-hooks 'time-stamp)


;;;---------------------------------------------------------------------
;;; Autosave and Backup
;;;
(setq auto-save-default t)
(setq auto-save-visited-file-name nil)
(setq make-backup-files t)
(setq backup-by-copying-when-linked t)  ; Preserve links!

;; File name in which we write a list of all auto save file names.
;;(setq auto-save-list-file-name "~/.emacs-auto-saves")


;;;---------------------------------------------------------------------
;;; INFO - If the sysadmin has missed adding info-directories in startup.el
;;;
;(require 'info)

;(defvar my-info-directory-list nil 
;  "This list will be added to the default directory-list when info starts up.")

;(defun my-enable-info-mode ()
;  "Prepares for info-mode startup by adding search paths etc."
;  (interactive)
;  (if (car my-info-directory-list)	; If there are more directories with info,
;      (setq Info-directory-list		; add them to the Info-directory-list.
;	    (append (mapcar 'expand-file-name my-info-directory-list)
;		    Info-directory-list))))

;(add-hook 'Info-mode-hook 'my-enable-info-mode)


;;;-----------------------------------------------------------------------------
;;; text-mode
(defun my-enable-text-mode ()
  "Yes, even the plain text mode can be improved by som settings."
  (auto-fill-mode t)
  (setq adaptive-fill-mode t))

(add-hook 'text-mode-hook 'my-enable-text-mode)


;;;-----------------------------------------------------------------------------
;;; shell-script-mode
(defun my-enable-shell-script-mode ()
  "My settings for editing shell scripts."
  (setq adaptive-fill-mode t)
  (my-enable-minor-modes))

(add-hook 'shell-script-mode 'my-enable-shell-script-mode)

  
;;;-----------------------------------------------------------------------------
;;; Emacs-Lisp and lisp stuff...
;;;
(defun my-enable-emacs-lisp-mode ()
  "Initialisation at startup of emacs-lisp-mode"
  (my-enable-imenu)
  (my-enable-minor-modes))

(defun my-enable-lisp-mode ()
  "Initialisation at startup of lisp-mode"
  (setq inferior-lisp-program "gcl")
  (my-enable-imenu)
  (my-enable-minor-modes))

(add-hook 'emacs-lisp-mode-hook 'my-enable-emacs-lisp-mode)
(add-hook 'lisp-mode-hook 'my-enable-lisp-mode)



;;;---------------------------------------------------------------------------
;;; cc-mode - settings for c-mode, c++-mode, java-mode and objc-mode.
;;;

;; Remove bindings to BOCM. 
;;(fmakunbound 'c-mode)
;;(makunbound 'c-mode-map)
;;(fmakunbound 'c++-mode)
;;(makunbound 'c++-mode-map)
;;(makunbound 'c-style-alist)

;; Append location of cc-mode to load-path
(setq load-path (append (list "/usr/share/emacs/site-lisp/cc-mode")
			load-path))

(require 'cc-mode)
(autoload 'c++-mode  "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode    "cc-mode" "C Editing Mode" t)
(autoload 'objc-mode "cc-mode" "Objective-C Editing Mode" t)
(autoload 'java-mode "cc-mode" "Java Editing Mode" t)

(defun my-enable-cc-mode ()
  "Start up things common to c-mode, c++-mode, java-mode and objc-mode."
  (setq c-basic-offset 3)		; Number of steps to indent.
  (define-key c-mode-base-map "\C-c\C-c" 'compile))

(defun my-enable-c-mode ()
  "Start c-mode in my fasion."
  (c-set-style "gnu")			; Wich indentation style to use.
  ;; Indentation of sub-blocks. + means indentation, 0 no indent.
  ;(c-set-offset 'substatement-open 0)
  (my-enable-imenu)
  (my-enable-minor-modes))

(defun my-enable-c++-mode ()
  "Start c++-mode in my way."
  (c-set-style "ellemtel")		; Wich indentation style to use. 
  (my-enable-imenu)
  (my-enable-minor-modes))

;; JDE ----------------------------------------------------------------------
;; Append location of jde to load-path
;(setq load-path (append (list "/usr/share/emacs/site-lisp/jde")
;			load-path))
;(require 'jde)
;; JDE ----------------------------------------------------------------------

(defun my-enable-java-mode ()
   "Start java-mode in my way. Initialize jde if it exists."
   (interactive)
   (c-set-offset 'substatement 0))
;  (if (and (featurep 'jde) (featurep 'jde-db))
;      (progn
;	(setq jde-web-browser "netscape")
;	(setq jde-doc-dir "/usr/local/java/doc")
;	(setq jde-compiler-name "javac")
;	(jde-db-set-source-paths "/usr/local/java/src/")))) ; Must end with slash
;)

(add-hook 'c-mode-common-hook 'my-enable-cc-mode)
(add-hook 'c++-mode-hook 'my-enable-c++-mode)
(add-hook 'c-mode-hook 'my-enable-c-mode)
(add-hook 'java-mode-hook 'my-enable-java-mode)
;(add-hook 'jde-java-mode-hook 'my-enable-java-mode)
;(add-hook 'objc-mode-hook 'my-enable-cc-mode)



;;;---------------------------------------------------------------------------
;;; Python-mode stuff...
(autoload 'python-mode "python-mode" "Python editing mode.")

;; Start python-mode when the file has .py as suffix.
(setq auto-mode-alist (append '(("\\.py$" . python-mode))
				    auto-mode-alist))

;; Map interpreter's name to the major mode.
(setq interpreter-mode-alist
      (cons '("python" . python-mode) interpreter-mode-alist))

(defun my-enable-python-mode ()
  "Start python-mode hook."
  (interactive)
  (setq py-indent-offset 3)		; Number of steps to indent.
  ;;  (setq font-lock-keywords python-font-lock-keywords) ; Keywords to font-lock.
  (my-enable-minor-modes))

(add-hook 'python-mode-hook 'my-enable-python-mode)


;;;-----------------------------------------------------------------------------
;;; simula stuff...
(autoload 'simula-mode "simula" "Simula editing mode.")

(defun my-enable-simula-mode ()
  "Settings to startup simula-mode."
  ;;(setq Simula-Keyword-Abbrev-File "/usr/local/Programs/Emacs/lisp/simula.defns")
  (my-enable-minor-modes))

(add-hook 'simula-mode-hook 'my-enable-simula-mode)

;; Start simula-mode when the file has .sim as suffix.
(setq auto-mode-alist (append '(("\\.sim$" . simula-mode))
			      auto-mode-alist))



;;;-----------------------------------------------------------------------------
;;; Setup for LaTeX, AUC-TeX, RefTeX with friends.
;;;
;; Check for packages...
;; Put the files in the AUC-TeX kit in the load-path, if in emacs 19.
;(if (eq emacs-major-version 19)

;; Put the info-files in the teTeX distribution in the info search path.
;(if (eq emacs-major-version 19)
;    (setq Info-directory-list
;	  (cons "/usr/lib/teTeX/info/" my-info-directory-list)))

;; ;; The basic latex-mode.
;; ;(require 'latex)			
      
;; ;;; AUC-TeX
;; ;; AUC-TeX
;; (setq load-path (append load-path
;; 			(list "/usr/share/emacs/site-lisp/auctex")))
;; (require 'tex-site)

;; ;;; RefTeX
;; (require 'reftex)		
      
;; ;;; Enhanced font-lock mode for latex.
;; (require 'font-latex)		
	
;; (defun my-enable-latex-with-auctex-and-reftex-mode ()
;;   "Starts LaTeX-mode with the excellent AUC-TeX and RefTeX minor mode." 
;;   (if (featurep 'tex-site)
;;       (progn
;; 	(setq TeX-auto-save t)
;; 	(setq TeX-parse-self t)
;; 	(setq-default TeX-master nil)))
  
;;   ;; RefTeX, if available.
;;   (if (featurep 'reftex)
;;       (progn
;; 	(setq reftex-plug-into-AUCTeX t)

;; 	;; Define the algorithm-environment to RefTeX:
;; 	(setq reftex-label-alist 
;; 	      '(("algorithm" "a" "~\\ref{%s}" nil "algorithm" "alg.")))
;; 	(turn-on-reftex)))

;;   ;; Always in latex-mode
;;   (auto-fill-mode 1)			; Break lines automatically.
;;   (my-set-faces))

;; (add-hook 'LaTeX-mode-hook 'my-enable-latex-with-auctex-and-reftex-mode)



;;;-----------------------------------------------------------------------------
;;; Makefile-mode
;(require 'makefile-mode)
(defun my-enable-makefile-mode ()
  "Initiations for makefile-mode."
  (my-enable-minor-modes)
  (my-enable-imenu))
  
(add-hook 'makefile-mode-hook 'my-enable-makefile-mode)



;;;-----------------------------------------------------------------------------
;;; gofer, haskell stuff...
;;;
(setq auto-mode-alist
	(append '(("\\.gs$" . gofer-mode) ; gofer source
		  ("\\.gp$" . gofer-project)) ; gofer project files
		auto-mode-alist))

(autoload 'gofer-mode "gofer" "Go into gofer mode" t)
(autoload 'run-gofer "gofer" "Run gofer as inferior process" t)
(autoload 'gofer-project "gofer" "Go into a gofer project" t)



;;;---------------------------------------------------------------------------
;;; prolog-mode
;;;
(defun my-enable-prolog-mode ()
  (my-enable-minor-modes))

(add-hook 'prolog-mode-hook 'my-enable-prolog-mode)

(setq auto-mode-alist (append '(("\\.P$" . prolog-mode)) auto-mode-alist))

;;;---------------------------------------------------------------------------
;;; xrdb-mode
;;;
;; (defun my-enable-xrdb-mode ()
;;   "Starts font-lock-mode whe xrdb-mode starts."
;;   (my-enable-minor-modes))

;; (add-hook 'xrdb-mode-hook 'my-enable-xrdb-mode)
;; (autoload 'xrdb-mode "xrdb-mode" "Mode for editing X resource files" t)
;; (setq auto-mode-alist
;;       (append '(("\\.Xdefaults$"    . xrdb-mode)
;; 		("\\.Xenvironment$" . xrdb-mode)
;; 		("\\.Xresources$"   . xrdb-mode)
;; 		("*.\\.ad$"         . xrdb-mode))
;;                auto-mode-alist))


;;;---------------------------------------------------------------------------
;;; Settings for ispell
;(require 'ispell)

;(defun my-ispell-after-load ()
;  (setq ispell-grep-command "/usr/bin/grep")
;  (setq ispell-complete-word-dict "/usr/lib/ispell/english.hash"))

;(if (fboundp 'eval-after-load)
;    (eval-after-load "ispell" '(my-ispell-after-load)))

;;;---------------------------------------------------------------------------
;;; Settings for OO-browser
;;;
;; Add the following key binding to your site keys configuration:
(global-set-key "\C-c\C-o" 'oo-browser)


;;;---------------------------------------------------------------------------
;;; Getris and snake... (games)
;(require 'boss)				; Needed by getris and snake
;(require 'getris)

;; Settings for getris
;; (if (and (featurep 'getris) (featurep 'boss))
;;     (progn
;;       ;; If getris and boss is in the system...
;;       (setq getris-initial-delay 5000)	
;;       (setq getris-min-delay 500)	
;;       (setq getris-acceleration 1000)	
;;       (setq getris-width 15)
;;       (setq getris-use-full-window t)))

;; (if (featurep 'snake)
;;     (require 'snake))

;;;---------------------------------------------------------------------------
;;; Personal w3 initiations...
;(require 'w3)

;; Note: the code works, but takes some time to execute at startup.
;(if (and (featurep 'w3) (eq emacs-major-version 19))
;    (progn
;      (load "w3-init")		; The automatic initialisationfile.
;      (setq url-be-asynchronous t)
;      (setq w3-default-homepage "~/public_html")
;      (setq url-global-history-file "~/.w3-history")
;      (setq w3-hotlist-file "~/.w3-hotlist")
;      (setq w3-track-mouse nil)))

;;;---------------------------------------------------------------------------
;;; Franz Lisp
;(if (eq emacs-major-version 19)
    ;; (progn
    ;;   (setq load-path (append load-path
    ;; 			      (list "/usr/share/emacs/site-lisp/fi")))
    ;;   (load "fi-site-init")))

;;;----------------------------------------------------------------------
;;; Activate the debugger whenever an error occurs.
;;;
; (defun my-after-init-hook ()
;   (setq debug-on-error t)
;   (my-set-faces))

; (add-hook 'after-init-hook 'my-after-init-hook)


;;;----------------------------------------------------------------------
;;; Leave for auto update
;;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tango-dark)))
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)

;;;----------------------------------------------------------------------
;;; Install Packages Using ELPA, MELPA
;;;
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) 


;;;----------------------------------------------------------------------
;;; Finally...
;(server-start)
;(my-set-faces)
(message "*** Loading personal .emacs file...done")

;;; .emacs ends here
;;;--------------------------------------------------------------------------- 
;; $Log: dot-emacs-orm.el,v $
;; Revision 1.2  1998/08/02 21:34:12  johannes
;; *** empty log message ***
;;
;; Revision 1.1.1.1  1998/08/02 16:57:17  cvsman
;; Initial revision.
;;

